
function RTDS_InterfaceModule_config(this_block)

  % Revision History:
  %
  %   30-Jan-2016  (16:05 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     D:\msv\02_msv-svo\s2ss\clients\rtds\RTDS_InterfaceModule_declaration.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('RTDS_InterfaceModule');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('SFP_RX_N');
  this_block.addSimulinkInport('SFP_RX_P');
  this_block.addSimulinkInport('UserTxAdr');
  this_block.addSimulinkInport('UserTxData');
  this_block.addSimulinkInport('UserTxWr');
  this_block.addSimulinkInport('UserLockBank');
  this_block.addSimulinkInport('UserFreeBank');
  this_block.addSimulinkInport('UserVersion');
  this_block.addSimulinkInport('MGTREFCLK');

  this_block.addSimulinkOutport('SFP_TX_N');
  this_block.addSimulinkOutport('SFP_TX_P');
  this_block.addSimulinkOutport('UserTxFull');
  this_block.addSimulinkOutport('UserTxInProgress');
  this_block.addSimulinkOutport('UserRxAdr');
  this_block.addSimulinkOutport('UserRxData');
  this_block.addSimulinkOutport('UserRxValid');
  this_block.addSimulinkOutport('UserTstepPulse');
  this_block.addSimulinkOutport('LinkUp');
  this_block.addSimulinkOutport('CardDetected');
  this_block.addSimulinkOutport('CaseReset');
  this_block.addSimulinkOutport('Clk100M');
  this_block.addSimulinkOutport('PowerOnRst');

  SFP_TX_N_port = this_block.port('SFP_TX_N');
  SFP_TX_N_port.setType('UFix_1_0');
  SFP_TX_N_port.useHDLVector(false);
  SFP_TX_P_port = this_block.port('SFP_TX_P');
  SFP_TX_P_port.setType('UFix_1_0');
  SFP_TX_P_port.useHDLVector(false);
  UserTxFull_port = this_block.port('UserTxFull');
  UserTxFull_port.setType('UFix_1_0');
  UserTxFull_port.useHDLVector(false);
  UserTxInProgress_port = this_block.port('UserTxInProgress');
  UserTxInProgress_port.setType('UFix_1_0');
  UserTxInProgress_port.useHDLVector(false);
  UserRxAdr_port = this_block.port('UserRxAdr');
  UserRxAdr_port.setType('UFix_16_0');
  UserRxData_port = this_block.port('UserRxData');
  UserRxData_port.setType('UFix_32_0');
  UserRxValid_port = this_block.port('UserRxValid');
  UserRxValid_port.setType('UFix_1_0');
  UserRxValid_port.useHDLVector(false);
  UserTstepPulse_port = this_block.port('UserTstepPulse');
  UserTstepPulse_port.setType('UFix_1_0');
  UserTstepPulse_port.useHDLVector(false);
  LinkUp_port = this_block.port('LinkUp');
  LinkUp_port.setType('UFix_1_0');
  LinkUp_port.useHDLVector(false);
  CardDetected_port = this_block.port('CardDetected');
  CardDetected_port.setType('UFix_1_0');
  CardDetected_port.useHDLVector(false);
  CaseReset_port = this_block.port('CaseReset');
  CaseReset_port.setType('UFix_1_0');
  CaseReset_port.useHDLVector(false);
  Clk100M_port = this_block.port('Clk100M');
  Clk100M_port.setType('UFix_1_0');
  Clk100M_port.useHDLVector(false);
  PowerOnRst_port = this_block.port('PowerOnRst');
  PowerOnRst_port.setType('UFix_1_0');
  PowerOnRst_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('SFP_RX_N').width ~= 1);
      this_block.setError('Input data type for port "SFP_RX_N" must have width=1.');
    end

    this_block.port('SFP_RX_N').useHDLVector(false);

    if (this_block.port('SFP_RX_P').width ~= 1);
      this_block.setError('Input data type for port "SFP_RX_P" must have width=1.');
    end

    this_block.port('SFP_RX_P').useHDLVector(false);

    if (this_block.port('UserTxAdr').width ~= 8);
      this_block.setError('Input data type for port "UserTxAdr" must have width=8.');
    end

    if (this_block.port('UserTxData').width ~= 32);
      this_block.setError('Input data type for port "UserTxData" must have width=32.');
    end

    if (this_block.port('UserTxWr').width ~= 1);
      this_block.setError('Input data type for port "UserTxWr" must have width=1.');
    end

    this_block.port('UserTxWr').useHDLVector(false);

    if (this_block.port('UserLockBank').width ~= 1);
      this_block.setError('Input data type for port "UserLockBank" must have width=1.');
    end

    this_block.port('UserLockBank').useHDLVector(false);

    if (this_block.port('UserFreeBank').width ~= 1);
      this_block.setError('Input data type for port "UserFreeBank" must have width=1.');
    end

    this_block.port('UserFreeBank').useHDLVector(false);

    if (this_block.port('UserVersion').width ~= 8);
      this_block.setError('Input data type for port "UserVersion" must have width=8.');
    end

    if (this_block.port('MGTREFCLK').width ~= 1);
      this_block.setError('Input data type for port "MGTREFCLK" must have width=1.');
    end

    this_block.port('MGTREFCLK').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % System Generator found no apparent clock signals in the HDL, assuming combinational logic.
  % -----------------------------
   if (this_block.inputRatesKnown)
     inputRates = this_block.inputRates; 
     uniqueInputRates = unique(inputRates); 
     outputRate = uniqueInputRates(1);
     for i = 2:length(uniqueInputRates)
       if (uniqueInputRates(i) ~= Inf)
         outputRate = gcd(outputRate,uniqueInputRates(i));
       end
     end  % for(i)
     for i = 1:this_block.numSimulinkOutports 
       this_block.outport(i).setRate(outputRate); 
     end  % for(i)
   end  % if(inputRatesKnown)
  % -----------------------------

    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('RTDS_InterfaceModule_declaration.vhd');

return;


